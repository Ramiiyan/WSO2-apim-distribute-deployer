name: Release GitHub Artifacts

on:
  workflow_call:
    inputs:
      git_org:
        required: true
        type: string
      repository:
        required: true
        type: string
      artifact_name:
        required: true
        type: string
      product:
        required: true
        type: string
      cleanup-artifact:
        required: false
        type: boolean
        default: true
    secrets:
      GIT_ACTION_PAT:
        required: true


jobs:
  release_artifacts:
    name: Release GitHub Artifacts
    runs-on: ubuntu-latest
    env:
      GIT_ORG: ${{ inputs.git_org }}
      REPOSITORY: ${{ inputs.repository }}
      PRODUCT_VERSION: ${{ inputs.product }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Authenticate GitHub CLI
        env:
          GIT_ACTION_PAT: ${{ secrets.GIT_ACTION_PAT }}
        run: |
          echo "$GIT_ACTION_PAT" | gh auth login --with-token

      - name: Get latest release tag
        id: get_latest_tag
        run: |
          current_tag_name=$(gh release view --repo "$GIT_ORG/$REPOSITORY" --json tagName --jq '.tagName' || echo "")
          echo "current_tag_name=$current_tag_name" >> $GITHUB_ENV

      - name: Determine new release version
        id: determine_version
        run: |
          if [ -z "$current_tag_name" ]; then
            new_tag="v0.1"
          else
            tag_version=$(echo "$current_tag_name" | grep -oP '\d+\.\d+' || echo "0.0")
            IFS="." read -ra ver_compo <<< "$tag_version"
            major_v="${ver_compo[0]}"
            minor_v=$(( ${ver_compo[1]} + 1 ))
            new_tag="v$major_v.$minor_v"
          fi
          echo "new_tag=$new_tag" >> $GITHUB_ENV
          echo "NEW_TAG_VERSION=$new_tag" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        run: |
          gh release create "$new_tag" --title "$REPOSITORY - $PRODUCT_VERSION - $new_tag" --notes "Release notes for $PRODUCT_VERSION product: release version $new_tag" --repo "$GIT_ORG/$REPOSITORY"
          echo "New GitHub Release created: $new_tag"

      - name: Download build artifacts
        id: artifact-download
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact_name }}
          path: artifacts/

      - name: Upload artifacts to GitHub Release
        run: |
          gh release upload "$new_tag" artifacts/* --repo "$GIT_ORG/$REPOSITORY"
          echo "Artifacts uploaded to GitHub release."

      - name: Clean Up Artifact
        if: ${{ inputs.cleanup-artifact }}
        run: |
          echo "Cleaning up artifacts..."
          # GitHub CLI api
          # https://cli.github.com/manual/gh_api

          # Get the list of artifacts
          gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/$GIT_ORG/$REPOSITORY/actions/artifacts
          
          # Get the artifact IDs
          artifact_ids=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/$GIT_ORG/$REPOSITORY/actions/artifacts | jq -r '.artifacts[] | select(.name == "${{ inputs.artifact_name }}") | .id')
          
          # Loop through the artifact IDs and delete them
          for artifact_id in $artifact_ids; do
            gh api \
              -X DELETE \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /repos/$GIT_ORG/$REPOSITORY/actions/artifacts/$artifact_id
            echo "Deleted artifact with ID: $artifact_id"
          done
          echo "Artifacts cleaned up."
      - name: Clean up downloaded artifacts
        if: ${{ inputs.cleanup-artifact }}
        run: |
          echo "Cleaning up downloaded artifacts..."
          rm -rf artifacts/
          echo "Downloaded artifacts cleaned up."
